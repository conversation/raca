#!/usr/bin/env ruby

# This script reliably reproduces an issues that existed in raca 0.3.1 and lower.
#
# If loaded with rails, raca caches the auth token in the rails cache to avoid
# hitting the identity API each time a new Raca::Account is instantiated. That
# token expires evry 24 hours, so one request per day will return 401 Unauthorised.
# When that happens, raca tries to silently re-authenticate to get a new token
# and then silently retry the original request.
#
# In 0.3.1 and below, if the request that triggered the 401 was a
# HttpClient#streaming_put, the re-auth would work but re-trying the original
# request would return a 408 Timeout from rackspace.
#
# It turns out the ruby Net:HttpRequest object cannot be re-used if the
# body_stream attribute has been set. The re-try request must use a brand new
# Net::HttpRequest object.
#
# usage:
#
#   ./script/timeout-test <rackspace-user> <rackspace-api-key> <container-region> <container-name>
#
# A copy of this script will be uploaded to the listed container.

require 'raca'

cache = {}
username, api_key, region, container = *ARGV

puts "prime the rails cache with our token"
account = Raca::Account.new(username, api_key, cache)
container = account.containers(region.to_s.to_sym).get(container.to_s)

File.open(__FILE__, "rb") do |io|
  container.upload("raca-test.rb", io)
end

puts "change the cached token to something incorrect"
cache["raca-#{username}"]["access"]["token"]["id"] = "broken"

puts "upload another file with a wrong token to force a 401"
account = Raca::Account.new(username, api_key, cache)
container = account.containers(region.to_sym).get("rba-wole-tmp")

File.open(__FILE__, "rb") do |io|
  container.upload("raca-test.rb", io)
end
